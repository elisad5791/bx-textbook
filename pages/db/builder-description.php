<h1>Построитель запросов ORM - описание</h1>

<p>Выполнение запросов делается с помощью класса <mark>Bitrix\Main\Entity\Query</mark>.</p>
<p>Для гибкого формирования запросов доступны следующие методы:</p>

<h4>Получаемые поля:</h4>
<ul>
  <li><mark>setSelect()</mark> - устанавливает массив с именами полей</li>
  <li><mark>addSelect()</mark> - добавляет имя поля</li>
  <li><mark>getSelect()</mark> - возвращает массив с именами полей</li>
</ul>

<h4>Фильтрация данных:</h4>
<ul>
  <li><mark>setFilter()</mark> - устанавливает массив с описанием фильтра</li>
  <li><mark>addFilter()</mark> - добавляет один параметр фильтра со значением</li>
  <li><mark>getFilter()</mark> - возвращает текущее описание фильтра</li>
</ul>

<h4>Сортировка данных:</h4>
<ul>
  <li><mark>setOrder()</mark> - устанавливает массив с именами полей и порядком сортировки</li>
  <li><mark>addOrder()</mark> - добавляет одно поле с порядком сортировки</li>
  <li><mark>getOrder()</mark> - возвращает текущее описание сортировки</li>
</ul>

<h4>Ограничение количества данных:</h4>
<ul>
  <li><mark>setLimit()</mark>, <mark>setOffset()</mark> - устанавливают значения</li>
  <li><mark>getLimit()</mark>, <mark>getOffset()</mark> - возвращаеют текущие значения</li>
</ul>

<h4>Временное поле:</h4>
<ul>
  <li><mark>registerRuntimeField()</mark> - регистрирует новое временное поле для исходной сущности</li>
</ul>

<p>Примеры построения запросов приведены в следующем параграфе.</p>